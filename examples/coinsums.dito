# coinsums.dito :
# find the total number of ways a target number can be made given a
# set of coins.

# make availble the `map` function.
import std

#Â main function is not required but is used here for structure.
def main() {
    let coins  = [1, 2, 5, 10, 20, 50, 100, 200]
    let target = 200
    print(coinSums(coins, target))
}

def coinSums(coins, target) {
    # intialise a array of zeros to the size of the target
    let sack = zeros(target + 1)
    # set the start to get the sum chains going.
    sack[0] = 1
    for coin in coins {
        # loop through and count how many times each coin
        # can be placed within the target.
        for i in range(coin, target+1) {
            sack[i] += sack[i-coin]
        }
    }
    return sack[target]
}

# helper function to generate an n sized array of zeros.
let zeros = def(n) -> map(def(_) -> 0, range(0, n))

main()