# ---------------------------------------------------------------------
# std.dito :
# file contains a super basic standard lib to extend the capabilities
# of the built in functions and basic types. This will be split into
# individual modules in the future as the language and features grow.
# To some extent this file is being used as a implementation playground.
# use:
#     import std
# ---------------------------------------------------------------------

# ---------------------------------------------------------------------
# constants:

let PI      =  3.141592653589793
let E       =  2.718281828459045

# TODO: trailing comments.
# MIN_INT 64bit: -9223372036854775808
# MAX_INT 64bit:  9223372036854775807

let MinInt = (1 << 63)

let MaxInt = (1 << 63) - 1


# ---------------------------------------------------------------------
# Array ops:

let last   = def(it) -> it[len(it) - 1]
let first  = def(it) -> it[0]
let append = def(it, val) ->  it ++ [val]
let copy   = def(it) -> [] ++ it
let popped = def(it) -> it[0:len(it)-1]

def map(fn, it) {
    let mut i = 0
    let arr = copy(it)
    for v in it {
        arr[i] = fn(v)
        i += 1
    }
    return arr
}

def reduce(fn, it) {
    let mut val = it[0]
    for i in range(1, len(it)) {
        val = fn(val, it[i])
    }
    return val
}

def filter(fn, it) {
    let mut new_it = []
    for v in it {
        if fn(v) {
            # this will fail with strings.
            new_it = new_it ++ [v]
        }
    }
    return new_it
}

def reversed(it) {
    let arr = copy(it)
    let mut i = 0
    let mut j = len(it) - 1
    for i < j {
        swap(arr, i, j)
        i += 1
        j -= 1
    }
    return arr
}

# perform inplace swap of items.
def swap(arr, i, j) {
    let tmp = arr[i]
    arr[i] = arr[j]
    arr[j] = tmp
    return arr
}

def join(it, sep) {
    # join items in an Iter as strings
    let mut val = string(it[0])
    for i in range(1, len(it)) {
        val = val ++ sep ++ string(it[i])
    }
    return val
}

def split(it, sep) {
    # split a string by seperator. Not really that effiecent.
    # maybe need some better language constructs for this.
    let mut arr = []
    let mut tmp = ""
    for c in it {
        if string(c) == sep {
            if tmp != "" {
                arr = arr ++ [tmp]
                tmp = ""
            }
        } else {
            tmp = tmp ++ string(c)
        }
    }
    if tmp != "" {
        arr = arr ++ [tmp]
    }
    return arr
}

def repeat(str, n) {
    let mut s = ""
    for _ in range(0, n) {
        s = s ++ str
    }
    return s
}

# ---------------------------------------------------------------------
# math :
#

let add     = def(a, b)  -> a + b
let sub     = def(a, b)  -> a - b
let div     = def(a, b)  -> a / b
let mul     = def(a, b)  -> a * b
let idiv    = def(a, b)  -> a // b
let mod     = def(a, b)  -> a % b
let even    = def(a)     -> a % 2 == 0
let odd     = def(a)     -> a % 2 != 0
let sqrt    = def(a)     -> a**0.5
let exp     = def(x)     -> E**x
let divmod  = def(a, b)  -> [a/b, a%b]
let hypot   = def(a, b)  -> (a**2 + b**2)**0.5
let sum     = def(it)    -> reduce(add, it)
let avg     = def(it)    -> sum(it) / len(it)
let prod    = def(it)    -> reduce(mul, it)
let pow     = def(a,b,z) -> a**b % z
let min     = def(a, b)  -> a if a < b else b
let max     = def(a, b)  -> a if a > b else b
let argmax  = def(f,a,b) -> a if f(a, b) else b
let floor   = def(a)     -> int(a)
let ceil    = def(a)     -> int(a) + 1
let radians = def(a)     -> a * 57.295779513
let degrees = def(a)     -> a * 0.01745329252
let fact    = def(a)     -> prod(range(1, a + 1))


# ---------------------------------------------------------------------
# random :
# Builds on top of the built in deftion `random`.
#
# refs
# https://github.com/python/cpython/blob/master/Lib/random.py

# return random int where result <= a
let randInt = def(a) -> int(random() * a)

# return a random choice from a iterable object.
let choice  = def(it) -> it[int(random() * len(it))]

# generate a random number between a and b.
let uniform = def(a, b) -> a + (b-a) * random()

def shuffled(it) {
    # created a new shuffled version of a given array.
    let arr = copy(it)
    shuffle(arr)
    return arr
}

def _shuffle(it) {
    # for a given array shuffle its elements inplace
    let maxIndex = len(it) - 1
    for i in range(0, maxIndex) {
        swap(it, i, randint(maxIndex))
    }
}

def sample(population, k) {
    # return k random elements from a given population.

    # we cant return more elements than we have. If the number is the same
    # just shuffle and return the population.
    let n = len(population)
    assert(k <= n or k < 0,
            "k must be less than the population size and greater than zero")
    if k == n {
        return shuffled(population)
    }
    # we dont have any hash like datastructures so we will create
    # an array of zeros the same size as the population with each
    # matching index denoting wheter it has been picked from the
    # population. If a index is picked set selected index to 1.
    let selected = array(n)

    # initialize needed varibles.
    let mut j = 0
    let mut result = array(k)

    # loop through k times and incrementally fill our samples indexes
    # with unique indexes from our population.
    for i in range(0, k) {
        j = randInt(n)
        for selected[j] != 0 {
            j = randInt(n)
        }
        result[i] = population[j]
        selected[j] = 1
    }
    return result
}

# ---------------------------------------------------------------------
# time :

let UNIX_EPOCH = 0x019DB1DED53E8000
let UNIX_DAY   = 86400
let UNIX_HOUR  = 3600
let UNIX_MIN   = 60

# return a string representation of the current time.
def strtime(t) {
    let mut secs = (t - UNIX_EPOCH) % UNIX_DAY
    if secs < 0 {
        secs += UNIX_DAY
    }
    let tm_hour = secs // 3600
    let tm_min  = secs // 60 % 60
    let tm_sec  = secs % 60
    return join([tm_hour, tm_min, tm_sec], ":")
}

# ---------------------------------------------------------------------
# Misc

def assert(cond, msg) {
    if not cond {
        error("Bad assertion: " ++ msg)
    }
}